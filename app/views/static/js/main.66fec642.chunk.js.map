{"version":3,"sources":["http-common.js","services/task.service.js","components/add-task.component.js","components/task.component.js","components/tasks-list.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","AddTask","props","onChangeTitle","bind","onChangeDescription","onChangeDate","saveTask","newTask","state","description","completed","startDate","Date","submitted","e","this","setState","target","value","TaskDataService","then","response","date","console","log","catch","className","onClick","htmlFor","type","required","onChange","name","selected","dateFormat","Component","Task","onChangeDueDate","OnChangeDueDate","getTask","updateCompleted","updateTask","deleteTask","currentTask","dueDate","message","match","params","prevState","status","update","history","push","TasksList","onChangeSearchTitle","retrieveTasks","refreshList","setActiveTask","removeAllTasks","searchTitle","Tasks","currentIndex","getAll","index","deleteAll","findByTitle","placeholder","map","key","to","App","style","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.66fec642.chunk.js","sourcesContent":["import axios from \"axios\";\r\nexport default axios.create({\r\n    baseURL: \"http://localhost:8080/api\",\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    }\r\n});","import http from \"../http-common\";\r\n\r\nclass taskDataService {\r\n    getAll() {\r\n        return http.get(\"/tasks\");\r\n    }\r\n\r\n    get(id) {\r\n        return http.get(`/tasks/${id}`);\r\n    }\r\n\r\n    create(data) {\r\n        return http.post(\"/tasks\", data);\r\n    }\r\n\r\n    update(id, data) {\r\n        return http.put(`/tasks/${id}`, data);\r\n    }\r\n\r\n    delete(id) {\r\n        return http.delete(`/tasks/${id}`);\r\n    }\r\n\r\n    deleteAll() {\r\n        return http.delete(`/tasks`);\r\n    }\r\n\r\n    findByTitle(title) {\r\n        return http.get(`/tasks?title=${title}`);\r\n    }\r\n}\r\n\r\nexport default new taskDataService();","import React, { Component } from \"react\";\r\nimport TaskDataService from \"../services/task.service\";\r\nimport DatePicker from 'react-datepicker';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class AddTask extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChangeTitle = this.onChangeTitle.bind(this);\r\n        this.onChangeDescription = this.onChangeDescription.bind(this);\r\n        this.onChangeDate = this.onChangeDate.bind(this);\r\n        this.saveTask = this.saveTask.bind(this);\r\n        this.newTask = this.newTask.bind(this);\r\n\r\n        this.state = {\r\n            id: null,\r\n            title: \"\",\r\n            description: \"\",\r\n            completed: false,\r\n            startDate: new Date(),\r\n\r\n            submitted: false\r\n        };\r\n    }\r\n\r\n    onChangeTitle(e) {\r\n        this.setState({\r\n            title: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeDescription(e) {\r\n        this.setState({\r\n            description: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeDate(e) {\r\n        this.setState({\r\n            startDate: e.target.value\r\n        })\r\n    }\r\n\r\n    saveTask() {\r\n        var data = {\r\n            title: this.state.title,\r\n            description: this.state.description\r\n        };\r\n\r\n        TaskDataService.create(data)\r\n            .then(response => {\r\n                this.setState({\r\n                    id: response.data.id,\r\n                    title: response.data.title,\r\n                    description: response.data.description,\r\n                    completed: response.data.completed,\r\n                    startDate: response.data.date,\r\n\r\n                    submitted: true\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    newTask() {\r\n        this.setState({\r\n            id: null,\r\n            title: \"\",\r\n            description: \"\",\r\n            completed: false,\r\n            startDate: \"\",\r\n\r\n            submitted: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"submit-form\">\r\n                {this.state.submitted ? (\r\n                    <div>\r\n                        <h4>Task submitted successfully!</h4>\r\n                        <button className=\"btn btn-success\" onClick={this.newTask}>\r\n                            Add\r\n                        </button>\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"title\">Title</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                id=\"title\"\r\n                                required\r\n                                value={this.state.title}\r\n                                onChange={this.onChangeTitle}\r\n                                name=\"title\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"description\">Description</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                id=\"description\"\r\n                                required\r\n                                value={this.state.description}\r\n                                onChange={this.onChangeDescription}\r\n                                name=\"description\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"startDate\">Due Date</label>\r\n                            <DatePicker\r\n                                selected={ this.state.startDate }\r\n                                onChange={ this.onChangeDate }\r\n                                name=\"startDate\"\r\n                                dateFormat=\"MM/dd/yyyy\"\r\n                            />\r\n                        </div>\r\n\r\n                        <button onClick={this.saveTask} className=\"btn btn-success\">\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport TaskDataService from \"../services/task.service\";\r\n\r\nexport default class Task extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChangeTitle = this.onChangeTitle.bind(this);\r\n        this.onChangeDescription = this.onChangeDescription.bind(this);\r\n        this.onChangeDueDate = this.OnChangeDueDate.bind(this);\r\n        this.getTask = this.getTask.bind(this);\r\n        this.updateCompleted = this.updateCompleted.bind(this);\r\n        this.updateTask = this.updateTask.bind(this);\r\n        this.deleteTask = this.deleteTask.bind(this);\r\n\r\n        this.state = {\r\n            currentTask: {\r\n                id: null,\r\n                title: \"\",\r\n                description: \"\",\r\n                completed: false,\r\n                dueDate: \"\",\r\n            },\r\n            message: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTask(this.props.match.params.id);\r\n    }\r\n\r\n    onChangeTitle(e) {\r\n        const title = e.target.value;\r\n\r\n        this.setState(function(prevState) {\r\n            return {\r\n                currentTask: {\r\n                    ...prevState.currentTask,\r\n                    title: title\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    onChangeDescription(e) {\r\n        const description = e.target.value;\r\n\r\n        this.setState(prevState => ({\r\n            currentTask: {\r\n                ...prevState.currentTask,\r\n                description: description\r\n            }\r\n        }));\r\n    }\r\n\r\n    onChangeDueDate(e) {\r\n        const dueDate = e.target.value;\r\n\r\n        this.setState(prevState => ({\r\n            currentTask: {\r\n                ...prevState.currentTask,\r\n                dueDate: dueDate\r\n            }\r\n        }));\r\n    }\r\n\r\n    getTask(id) {\r\n        TaskDataService.get(id)\r\n            .then(response => {\r\n                this.setState({\r\n                    currentTask: response.data\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    updateCompleted(status) {\r\n        var data = {\r\n            id: this.state.currentTask.id,\r\n            title: this.state.currentTask.title,\r\n            description: this.state.currentTask.description,\r\n            completed: status,\r\n            dueDate: this.state.currentTask.dueDate\r\n        };\r\n\r\n        TaskDataService.update(this.state.currentTask.id, data)\r\n            .then(response => {\r\n                this.setState(prevState => ({\r\n                    currentTask: {\r\n                        ...prevState.currentTask,\r\n                        completed: status\r\n                    }\r\n                }));\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    updateTask() {\r\n        TaskDataService.update(\r\n            this.state.currentTask.id,\r\n            this.state.currentTask\r\n        )\r\n            .then(response => {\r\n                console.log(response.data);\r\n                this.setState({\r\n                    message: \"The Task was updated successfully!\"\r\n                });\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    deleteTask() {\r\n        TaskDataService.delete(this.state.currentTask.id)\r\n            .then(response => {\r\n                console.log(response.data);\r\n                this.props.history.push('/Tasks')\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { currentTask } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                {currentTask ? (\r\n                    <div className=\"edit-form\">\r\n                        <h4>Task</h4>\r\n                        <form>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"title\">Title</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"title\"\r\n                                    value={currentTask.title}\r\n                                    onChange={this.onChangeTitle}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"description\">Description</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"description\"\r\n                                    value={currentTask.description}\r\n                                    onChange={this.onChangeDescription}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label>\r\n                                    <strong>Status:</strong>\r\n                                </label>\r\n                                {currentTask.completed ? \"Completed\" : \"Pending\"}\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"dueDate\">Due Date</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"dueDate\"\r\n                                    value={currentTask.dueDate}\r\n                                    onChange={this.onChangeDueDate}\r\n                                />\r\n                            </div>\r\n                        </form>\r\n\r\n                        {currentTask.completed ? (\r\n                            <button\r\n                                className=\"badge badge-primary mr-2\"\r\n                                onClick={() => this.updateCompleted(false)}\r\n                            >\r\n                                Mark Pending\r\n                            </button>\r\n                        ) : (\r\n                            <button\r\n                                className=\"badge badge-primary mr-2\"\r\n                                onClick={() => this.updateCompleted(true)}\r\n                            >\r\n                                Mark Complete\r\n                            </button>\r\n                        )}\r\n\r\n                        <button\r\n                            className=\"badge badge-danger mr-2\"\r\n                            onClick={this.deleteTask}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"badge badge-success\"\r\n                            onClick={this.updateTask}\r\n                        >\r\n                            Update\r\n                        </button>\r\n                        <p>{this.state.message}</p>\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        <br />\r\n                        <p>Please click on a Task...</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport TaskDataService from \"../services/task.service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class TasksList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\r\n        this.retrieveTasks = this.retrieveTasks.bind(this);\r\n        this.refreshList = this.refreshList.bind(this);\r\n        this.setActiveTask = this.setActiveTask.bind(this);\r\n        this.removeAllTasks = this.removeAllTasks.bind(this);\r\n        this.searchTitle = this.searchTitle.bind(this);\r\n\r\n        this.state = {\r\n            Tasks: [],\r\n            currentTask: null,\r\n            currentIndex: -1,\r\n            searchTitle: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.retrieveTasks();\r\n    }\r\n\r\n    onChangeSearchTitle(e) {\r\n        const searchTitle = e.target.value;\r\n\r\n        this.setState({\r\n            searchTitle: searchTitle\r\n        });\r\n    }\r\n\r\n    retrieveTasks() {\r\n        TaskDataService.getAll()\r\n            .then(response => {\r\n                this.setState({\r\n                    Tasks: response.data\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    refreshList() {\r\n        this.retrieveTasks();\r\n        this.setState({\r\n            currentTask: null,\r\n            currentIndex: -1\r\n        });\r\n    }\r\n\r\n    setActiveTask(Task, index) {\r\n        this.setState({\r\n            currentTask: Task,\r\n            currentIndex: index\r\n        });\r\n    }\r\n\r\n    removeAllTasks() {\r\n        TaskDataService.deleteAll()\r\n            .then(response => {\r\n                console.log(response.data);\r\n                this.refreshList();\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    searchTitle() {\r\n        this.setState({\r\n            currentTask: null,\r\n            currentIndex: -1\r\n        });\r\n\r\n        TaskDataService.findByTitle(this.state.searchTitle)\r\n            .then(response => {\r\n                this.setState({\r\n                    Tasks: response.data\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { searchTitle, Tasks, currentTask, currentIndex } = this.state;\r\n\r\n        return (\r\n            <div className=\"list row\">\r\n                <div className=\"col-md-8\">\r\n                    <div className=\"input-group mb-3\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Search by title\"\r\n                            value={searchTitle}\r\n                            onChange={this.onChangeSearchTitle}\r\n                        />\r\n                        <div className=\"input-group-append\">\r\n                            <button\r\n                                className=\"btn btn-outline-secondary\"\r\n                                type=\"button\"\r\n                                onClick={this.searchTitle}\r\n                            >\r\n                                Search\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    <h4>Tasks List</h4>\r\n\r\n                    <ul className=\"list-group\">\r\n                        {Tasks &&\r\n                            Tasks.map((Task, index) => (\r\n                                <li\r\n                                    className={\r\n                                        \"list-group-item \" +\r\n                                        (index === currentIndex ? \"active\" : \"\")\r\n                                    }\r\n                                    onClick={() => this.setActiveTask(Task, index)}\r\n                                    key={index}\r\n                                >\r\n                                    {Task.title}\r\n                                </li>\r\n                            ))}\r\n                    </ul>\r\n\r\n                    <button\r\n                        className=\"m-3 btn btn-sm btn-danger\"\r\n                        onClick={this.removeAllTasks}\r\n                    >\r\n                        Remove All\r\n                    </button>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    {currentTask ? (\r\n                        <div>\r\n                            <h4>Task</h4>\r\n                            <div>\r\n                                <label>\r\n                                    <strong>Title:</strong>\r\n                                </label>{\" \"}\r\n                                {currentTask.title}\r\n                            </div>\r\n                            <div>\r\n                                <label>\r\n                                    <strong>Description:</strong>\r\n                                </label>{\" \"}\r\n                                {currentTask.description}\r\n                            </div>\r\n                            <div>\r\n                                <label>\r\n                                    <strong>Status:</strong>\r\n                                </label>{\" \"}\r\n                                {currentTask.completed ? \"Completed\" : \"Pending\"}\r\n                            </div>\r\n                            <div>\r\n                                <label>\r\n                                    <strong>Due Date:</strong>\r\n                                </label>{\" \"}\r\n                                {currentTask.dueDate}\r\n                            </div>\r\n\r\n                            <Link\r\n                                to={\"/Tasks/\" + currentTask.id}\r\n                                className=\"badge badge-warning\"\r\n                            >\r\n                                Edit\r\n                            </Link>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <br />\r\n                            <p>Please click on a Task...</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Switch, Route, Link } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport AddTask from \"./components/add-task.component\";\r\nimport Task from \"./components/task.component\";\r\nimport TasksList from \"./components/tasks-list.component\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand navbar-dark bg-primary\">\r\n                    <Link to={\"/tasks\"} className=\"navbar-brand\">\r\n                       <span style={{\r\n                           \"font-family\":'Pacifico'\r\n                       }}\r\n                       >\r\n                           HoneyDo\r\n                       </span>\r\n                    </Link>\r\n                    <div className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to={\"/tasks\"} className=\"nav-link\">\r\n                                Tasks\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to={\"/add\"} className=\"nav-link\">\r\n                                Add\r\n                            </Link>\r\n                        </li>\r\n                    </div>\r\n                </nav>\r\n\r\n                <div className=\"container mt-3\">\r\n                    <Switch>\r\n                        <Route exact path={[\"/\", \"/tasks\"]} component={TasksList} />\r\n                        <Route exact path=\"/add\" component={AddTask} />\r\n                        <Route path=\"/tasks/:id\" component={Task} />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}